"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const cross_spawn_1 = __importDefault(require("cross-spawn"));
function 字符串转数组(s) {
    return s
        .toString()
        .replace(/\r/g, '')
        .split('\n')
        .filter((a) => a != null)
        .filter((a) => a != '');
}
function fun(cmd, opt) {
    return new Promise((res, rej) => {
        var c = cmd.trim().replace(/  /g, ' ').split(' ');
        var 进程 = cross_spawn_1.default(c[0], c.slice(1), opt);
        var out日志 = '';
        var err日志 = '';
        var 错误 = null;
        if (进程.stdout == null)
            throw '创建失败';
        if (进程.stderr == null)
            throw '创建失败';
        if (进程.stdin == null)
            throw '创建失败';
        进程.on('close', (code) => {
            if (code == 0) {
                return res(字符串转数组(out日志));
            }
            else {
                return rej([错误 ? JSON.stringify(错误) : '', err日志, out日志]
                    .filter((a) => a != '')
                    .join('\n')
                    .trim());
            }
        });
        进程.on('error', (err) => {
            错误 = err;
        });
        进程.stdout.on('data', (data) => {
            out日志 += data.toString();
        });
        进程.stderr.on('data', (data) => {
            err日志 += data.toString();
        });
    });
}
exports.default = fun;
//# sourceMappingURL=index.js.map